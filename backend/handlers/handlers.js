const bcrypt = require("bcrypt");
const jwt = require('jsonwebtoken');
const mysql = require("mysql");
require('dotenv').config();
const { DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME, START_POINTS, SECRET_KEY, REFRESH_SECRET_KEY} = process.env;

let db = mysql.createConnection({
    host: DB_HOST,
    port: DB_PORT,
    user: DB_USER,
    password: DB_PASSWORD,
    database: DB_NAME,
});
// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
db.connect((err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
        process.exit(1); // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –ë–î..');
});
function registrationHandler(req, res) {
    const { username, password, phone, email, birth_date } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–æ–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if (!username || !password || !phone || !email || !birth_date) {
        return res.status(400).send('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è.');
    }

    // –®–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = bcrypt.hashSync(password, 10);
    const hashedPhone = bcrypt.hashSync(phone, 5);
    const hashedMail = bcrypt.hashSync(email, 5);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    db.query('SELECT * FROM Users WHERE user_name = ?', [username], (err, results) => {
        if (err) {
            return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        }
        if (results.length > 0) {
            return res.status(409).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.query('INSERT INTO Users (user_name, user_password, user_phone, user_email, points, birth_date) VALUES (?, ?, ?, ?, ?, ?)',
                [username, hashedPassword, hashedPhone, hashedMail, Number(START_POINTS), birth_date],
                (err) => {
                    if (err) {
                        return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
                    }
                    return res.status(201).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.');
                });
        }
    });
} // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
function loginHandler(req, res) {
    const { username, password } = req.body;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–æ–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if (!username || !password) {
        return res.status(400).send('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è.');
    }
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.query('SELECT * FROM Users WHERE user_name = ?', [username], (err, users) => {
        if (err) {
            return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        }
        if (users.length === 0) {
            return res.status(401).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        const user = users[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isMatch = bcrypt.compareSync(password, user.user_password);
        if (!isMatch) {
            return res.status(401).send('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.');
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        const accessToken = jwt.sign(
            { id: user.user_id, username: user.user_name, user_points: user.points },
            SECRET_KEY,
            { expiresIn: '30m' });
        const refreshToken = jwt.sign(
            { id: user.user_id, username: user.user_name, user_points: user.points },
            REFRESH_SECRET_KEY,
            { expiresIn: '14d' });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω –∏ access —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.query('UPDATE Users SET refresh_token = ?, access_token = ? WHERE user_id = ?', [refreshToken, accessToken, user.user_id], (updateErr) => {
            if (updateErr) {
                return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', error: updateErr });
            }
            // –ó–¥–µ—Å—å –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ–ª—å–∫–æ accessToken –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞, –∞ refreshToken —Å–ª–µ–¥—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ httpOnly cookie –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
            return res
                .cookie("refresh_token", refreshToken, {
                    httpOnly: true,
                    secure: true,
                    sameSite: 'strict'
                }) // –ó–∞–ø–∏—Å—å refreshToken –≤ –∫—É–∫–∏
                .status(200)
                .json({accessToken: accessToken}); // –û–±—ã—á–Ω–æ refreshToken –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        });
    });
} // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö
function tokenHandler(req, res) {
    const token = req.cookies.refresh_token;
    if (!token) {
        return res.sendStatus(401).send("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"); // –û—Ç–≤–µ—Ç "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å refresh —Ç–æ–∫–µ–Ω
    jwt.verify(token, REFRESH_SECRET_KEY, (err, user) => {
        if (err) return res.sendStatus(403).send('–ó–∞–ø—Ä–µ—â–µ–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'); // –û—Ç–≤–µ—Ç "–∑–∞–ø—Ä–µ—â–µ–Ω–æ", –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω
        const accessToken = jwt.sign({ id: user.user_id, username: user.user_name, user_points: user.points},
            SECRET_KEY,
            { expiresIn: '30m' });
        res.status(200).json({ accessToken });
    });
}
function logoutHandler(req, res){
    // –û—á–∏—â–∞–µ–º –∫—É–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
    res
        .clearCookie("refresh_token")
        .status(200)
        .json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–æ –≤—Å—Ç—Ä–µ—á–∏!" });
} // –£–¥–∞–ª—è–µ–º –∫—É–∫–∏
function getBalance(req, res){
    const { id } = req.body;
    db.query('SELECT points FROM Users WHERE user_id = ?', [id], (err, result) => {
        if(err || result.length === 0) {
            return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
        } else {
            res.json({ balance: result[0].points });
        }
    });
}
function addBalance(req, res){
    const { id, points } = req.body;
    db.query('SELECT points FROM Users WHERE user_id = ?', [id], (err, result) => {
        if(err || result.length === 0) {
            return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
        } else {

            let balance = result[0].points + points;
            db.query('UPDATE Users SET points = ? WHERE user_id = ?', [balance, id], (err, result) =>{
                if(err || result.length === 0) {
                    return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
                }
                return res.status(200).send('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
            });

        }
    });
}
function delBalance(req, res){
    const { id, points } = req.body;
    db.query('SELECT points FROM Users WHERE user_id = ?', [id], (err, result) => {
        if(err || result.length === 0) {
            return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
        } else {
            if (result[0].points > points) {
                let balance = result[0].points - points;
                db.query('UPDATE Users SET points = ? WHERE user_id = ?', [balance, id], (err, result) =>{
                    if(err || result.length === 0) {
                        return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
                    }
                    return res.status(200).send('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
                });
            }
        }
    });
}
function notFoundHandler(req, res){
    res.status(404).send('–°—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—â–µ—Ç–µ, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ü§î');
}

module.exports = {
    registrationHandler,
    loginHandler,
    tokenHandler,
    logoutHandler,
    getBalance,
    addBalance,
    delBalance,
    notFoundHandler
};
