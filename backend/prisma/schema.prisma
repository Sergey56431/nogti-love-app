generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String               @db.VarChar(100)
  lastName           String?              @db.VarChar(100)
  phoneNumber        String               @unique @db.VarChar(20)
  score              Int?                 @default(100)
  rate               Int?                 @default(0)
  birthday           DateTime?
  role               String               @default("ADMIN")
  description        String?              @db.VarChar(200)
  password           String               @db.VarChar(60)
  refreshToken       String?
  calendar           Calendar[]
  category           Category[]
  categoryOperations CategoryOperations[]
  createdRoles       CustomRole[]
  directs            Directs[]
  income_Expanses    Income_Expanses[]
  client             Client[]
  settings           Settings?
}

model CustomRole {
  id     String @id @default(uuid())
  name   String @db.VarChar(100)
  userId String @db.VarChar(100)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Settings {
    id                  String    @id @default(uuid())
    defaultWorkTime     String    @default("09:00-16:00")
    defaultBreakTime    String    @default("00:30")
    timeGranularity     String    @default("00:30")
    settingsData        Json
    userId              String    @unique
    user                User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Calendar {
  id        String     @id @default(uuid())
  date      DateTime   @db.Date
  time      String?
  state     DayState   @default(empty)
  userId    String
  creator   User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  directs   Directs[]
  freeSlots FreeSlot[]

  @@unique([date, userId])
}

model FreeSlot {
  id         String   @id @default(uuid())
  time       String
  calendarId String
  isBooked   Boolean  @default(false)
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([calendarId, time])
}

model Directs {
  id         String            @id @default(uuid())
  phone      String?
  clientName String?
  time       String
  comment    String?
  userId     String?
  state      DirectsState?     @default(notConfirmed)
  services   DirectsServices[]
  calendarId String
  user       User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  calendar   Calendar?         @relation(fields: [calendarId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([calendarId])
}

model Income_Expanses {
  id                   String               @id @default(uuid())
  categoryId           String
  type                 TypeOperation
  value                Float
  createDate           DateTime?            @default(now())
  updateDate           DateTime?
  userId               String
  categoryOperations   CategoryOperations   @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user                 User                 @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model CategoryOperations {
  id                String              @id @default(uuid())
  name              String
  userId            String
  income_Expanses   Income_Expanses[]
  user              User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Category {
  id       String     @id @default(uuid())
  name     String     @db.VarChar(100)
  userId   String
  services Services[]
  user     User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Services {
  id         String            @id @default(uuid())
  name       String            @db.VarChar(100)
  time       String
  price      Float
  directs    DirectsServices[]
  categoryId String
  category   Category          @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model DirectsServices {
  serviceId String
  directId  String
  service   Services @relation(fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  direct    Directs  @relation(fields: [directId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([directId, serviceId])
  @@index([directId, serviceId])
}

model Client {
    id              String      @id @default(uuid())
    name            String
    lastName        String?
    phoneNumber     String      @unique
    rate            Float?
    birthday        DateTime?
    description     String?
    password        String
    refreshToken    String?
    roleId          String      @default("CLIENT")
    masterId        String?
    user            User?       @relation(fields: [masterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    score           Int?
}

enum TypeOperation {
  income
  expense
}

enum DirectsState {
  notConfirmed
  confirmed
  cancelled
}

enum DayState {
  empty
  full
  have
  notHave
}

enum Role {
  CLIENT
  ADMIN
  EMPLOYE
}
