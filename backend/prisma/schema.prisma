generator client {
provider        = "prisma-client-js"
previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

model User {
id              String            @id @default(uuid())
name            String            @db.VarChar(100)
lastName        String?           @db.VarChar(100)
username        String            @unique @db.VarChar(100)
phoneNumber     String            @unique @db.VarChar(20)
score           Int?              @default(100)
rate            Int?              @default(100)
birthday        DateTime?
description     String?           @db.VarChar(200)
password        String            @db.VarChar(60)
role            Role              @default(CLIENT)
calendar        Calendar[]
refreshToken    String?
directs         Directs[]
category        Category[]
Income_Expanses Income_Expanses[]
}

model Calendar {
id      String    @id @default(uuid())
date    DateTime  @unique @db.Date
directs Directs[]
state   DayState  @default(empty)
userId  String
creator User      @relation(fields: [userId], references: [id])
@@index([date])
}

model Directs {
id                    String   @id @default(uuid())
phone                 String?
clientName            String?
time                  String
comment               String?
userId                String?
directsServices       DirectsServices[]
calendarId            String
user                  User?    @relation(fields: [userId], references: [id])
calendar              Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
@@index([calendarId])
}

model Income_Expanses {
id         String        @id @default(uuid())
category   String
type       TypeOperation
value      Float
createDate DateTime      @default(now())
updateDate DateTime?
userId     String
user       User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Category {
id        String    @id @default(uuid())
name      String    @db.VarChar(100)
userId    String
services  Services[]
user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Services {
id                String    @id @default(uuid())
name              String    @db.VarChar(100)
time              DateTime
price             Float
directsServices   DirectsServices[]
categoryId        String
category          Category  @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model DirectsServices {
serviceId  String
directId   String
service    Services   @relation(fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
direct     Directs    @relation(fields: [directId], references: [id], onUpdate: Cascade, onDelete: Cascade)
@@index([directId, serviceId])
@@id([directId, serviceId])
}

enum TypeOperation {
income
expense
}

enum DayState {
empty
full
have
notHave
}

enum Role {
CLIENT
ADMIN
EMPLOYE
}